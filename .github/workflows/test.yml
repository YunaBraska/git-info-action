name: "TEST"

on:
  workflow_dispatch:
  push:
    tags-ignore:
      - '**'
    paths-ignore:
      - '**.md'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    steps:
      - name: "Validate Input"
        id: "inputs"
        run: |
          if [ "$GITHUB_ACTOR" != "YunaBraska" ]; then echo "Permission denied for user [$GITHUB_ACTOR]"; exit 1; fi
          has_publish_to_code_climate=$(if [[ "${{secrets.CC_TEST_REPORTER_ID}}" == "" ]]; then echo "false"; else echo "true"; fi)
          echo "has_publish_to_code_climate [$has_publish_to_code_climate]"
          echo "has_publish_to_code_climate=$has_publish_to_code_climate" >> $GITHUB_OUTPUT
          echo "--------------------- ENVS ---------------------"
          env
      - name: "Checkout"
        uses: actions/checkout@main
      - name: "Setup Node"
        uses: actions/setup-node@main
        with:
          node-version: "16"
          cache: npm
      - name: "update dependencies"
        run: |
          npm outdated || true 
          npm update --save
          npm audit fix --force
      - name: "Run Tests"
        run: |
          npm ci && npm run test:coverage
      - name: "Read Git Info"
        id: "git_info"
        uses: YunaBraska/git-info-action@main
      - name: "Print Git Info"
        run: |
          echo "is_git_repo          [${{ steps.git_info.outputs.is_git_repo }}]"
          echo "tag_latest           [${{ steps.git_info.outputs.tag_latest }}]"
          echo "sha_latest           [${{ steps.git_info.outputs.sha_latest }}]"
          echo "sha_latest_tag       [${{ steps.git_info.outputs.sha_latest_tag }}]"
          echo "branch               [${{ steps.git_info.outputs.branch }}]"
          echo "branch_default       [${{ steps.git_info.outputs.branch_default }}]"
          echo "has_changes          [${{ steps.git_info.outputs.has_changes }}]"
          echo "has_local_changes    [${{ steps.git_info.outputs.has_local_changes }}]"
          echo "has_breaking_changes [${{ steps.git_info.outputs.has_breaking_changes }}]"
          echo "commit_types         [${{ steps.git_info.outputs.commit_types }}]"
          echo "commit_scopes        [${{ steps.git_info.outputs.commit_scopes }}]"
          echo "ticket_numbers       [${{ steps.git_info.outputs.ticket_numbers }}]"
          echo "x_has_changes_python [${{ steps.git_info.outputs.x_has_changes_python }}]"
